@name Sphere Player Locator
@inputs Base:entity
@persist Players:array PlayerColor:vector
interval(100)
if(first()){
    
    Size=4
    holoCreate(1000)
    holoModel(1000, "models/sprops/geometry/sphere_144.mdl")
    holoParent(1000, Base)
    holoMaterial(1000, "models/wireframe")
    holoDisableShading(1000, 1)
    holoScale(1000, vec(Size))
    
    holoCreate(1001)
    holoModel(1001, "models/sprops/geometry/sphere_144.mdl")
    holoParent(1001, Base)
    holoMaterial(1001, "models/wireframe")
    holoDisableShading(1001, 1)
    holoScale(1001, vec(-Size))
    
}
if(changed(players():count())){
findExcludeEntity(owner())
findByClass("player")
Players=findToArray()
}
foreach(I:number, Ent:entity = Players){
        
        Size=1
        
        PlayerColor=vec(0,255,0)
        
    holoCreate(I)
    holoModel(I, "")
    holoScale(I, vec(1,1,1))
    holoMaterial(I, "models/debug/debugwhite")
    holoColor(I, vec(255,255,255))
    holoAng(I, (Base:pos()-Ent:pos()):toAngle())
    holoAlpha(I, 0)
    holoDisableShading(I, 1)
    holoPos(I, Base:toWorld(vec(0,0,0)))
    
    holoCreate(I+200)
    holoModel(I+200, "models/sprops/geometry/fhex_12.mdl")
    holoScale(I+200, vec(3/(Size),1,3/(Size)))
    holoMaterial(I+200, "models/debug/debugwhite")
    holoColor(I+200, PlayerColor)
    holoAng(I+200, holoEntity(I):toWorld(ang(0,90,0)))
    holoAlpha(I+200, 255)
    holoDisableShading(I+200, 1)
    holoPos(I+200, holoEntity(I):toWorld(vec(-275,0,0)))
    
}
